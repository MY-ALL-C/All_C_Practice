
-------
This is a technical guide to the C Basic & Advance Practices ::
-------

#Topic 1        ::      C - Program Structure
#Topic 2        ::      C - Data Types
#Topic 3        ::      C - Variables
#Topic 4        ::      C - Constants and Literals
#Topic 5        ::      C - Storage Classes
#Topic 6        ::      C - Operators
#Topic 7        ::      C - Decision Making
#Topic 8        ::      C - Loops
#topic 9        ::      C - Functions
#Topic 10       ::      C - Scope Rules
#Topic 11       ::      C - Arrays








NOTE :: It is important to consider the [POINTER] As storage space for [REFERENCE]



______________________________________________________________________________________________________________________________

A TYPICAL ERROR FORMAT IN C ::
______________________________________________________________________________________________________________________________

2DataType.c: In function ‘main’:
2DataType.c:14:51: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
     printf("The Size of int in this machine is : %d  \n", sizeof(int));
                                                  ~^
                                                  %ld

In The second Line The o/p snippet      2DataType.c:14:51: warning:     describes as::
2DataType.c     ==>     The File Name,
14:51           ==>     The Line Number and the character no in the line.
warning         ==>     The Critical depth of the ERROR.

In The 5th Line there is a possible suggestion.

______________________________________________________________________________________________________________________________

A Error Recorded When an empty c source file wad attempted to compile ::
______________________________________________________________________________________________________________________________
/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o: In function `_start':
(.text+0x20): undefined reference to `main'
collect2: error: ld returned 1 exit status










__________________________________
#1 C - Program Structure ::

A C program basically consists of the following parts :
    - Preprocessor Commands
    - Functions
    - Variables
    - Statements & Expressions
    - Comments

#include <stdio.h> is a preprocessor command, which tells a C compiler to include stdio.h file before going to actual compilation.
int main() is the main function where the program execution begins.
The next line return 0; terminates the main() function and returns the value 0.

Tokens in C :
A C program consists of various tokens.
A token is can be an identifier, a keyword, a constant, a string literal, or a symbol.

Identifier In C :
An Identifier starts with a letter A to Z, a to z, or an underscore '_' followed by zero or more letters, underscores, and digits (0 to 9).
C does not allow punctuation characters such as @, $, and % within identifiers.
C is a case-sensitive programming language.


Keywords in C :
The following is a list of keywords available with c
auto        else        long        switch
break       enum        register	typedef
case        extern      return      union
char        float       short       unsigned
const       for         signed      void
continue    goto        sizeof      volatile
default     if          static      while
do          int         struct      _Packed
double			

rerely used keywords :: register, volatile, _Packed
Tips :: Try to learn the uses of {enum} keyword in coding


Whitespace In C :
Whitespace is the term used in C to describe blanks, tabs, newline characters and comments.
Whitespace separates one part of a statement from another and enables the compiler to identify where one element in a statement, such as int, ends and the next element begins


_________________________________
#2 C DataTypes ::
In all programming language the type of a variable determines how much space it occupies in storage and how the bit pattern stored is interpreted.

types in C can be classified as follows −

Basic Types :
        (a) integer types and
        (b) floating-point types.
Enumerated types :
        They are again arithmetic types and they are used to define variables that can only assign certain  [ discrete integer ] values throughout the program.
Void type :
        The type specifier void indicates that no value is available.
Derived types :
        (a) Pointer types
        (b) Array types
        (c) Structure types
        (d) Union types and
        (e) Function types.

The [array type] and {structure type} are referred collectively as the --aggregate types--.
The type of a function specifies the type of the { function's return value }.

Integer Types ::
----------------------------------------------------------------------------------------------------------
Type	            Storage size	    Value range
----------------------------------------------------------------------------------------------------------
char	            1 byte	            -128 to 127 or 0 to 255
unsigned char	    1 byte	            0 to 255
signed char	        1 byte	            -128 to 127
int	                2 or 4 bytes	    -32,768 to 32,767 or -2,147,483,648 to 2,147,483,647
unsigned int	    2 or 4 bytes	    0 to 65,535 or 0 to 4,294,967,295
short	            2 bytes	            -32,768 to 32,767
unsigned short	    2 bytes	            0 to 65,535
long	            4 bytes	            -2,147,483,648 to 2,147,483,647
unsigned long	    4 bytes	            0 to 4,294,967,295
----------------------------------------------------------------------------------------------------------

Floating-Point Types ::
----------------------------------------------------------------------------------------------------------
Type	            Storage size	        Value range	Precision
--------------------------------------------------------------------------------------------------------
float	            4 byte	                1.2E-38 to 3.4E+38	6 decimal places
double	            8 byte	                2.3E-308 to 1.7E+308	15 decimal places
long double	        10 byte	                3.4E-4932 to 1.1E+4932	19 decimal places


The void Type ::
The void type specifies that no value is available.
Void is used in three kinds of situations −

Function returns as void :
    There are various functions in C which do not return any value or you can say they return void.
    A function with no return value has the return type as void. For example, void exit (int status);
Function arguments as void :
    There are various functions in C which do not accept any parameter.
    A function with no parameter can accept a void. For example, int rand(void);
Pointers to void :
    A pointer of type void * represents the [address of an object], but not its type.
    For example, a memory allocation function {{    void *malloc(size_t size);   }}
    returns a pointer to void -- which can be casted to any data type -- .

[**] OVERALLY SPEAKING THE [VOID] DEALS WITH {TYPE} NOT VALUE
     For a scinario POINTER OF TYPE VOID, Does Contain the information about VALUE(ADDRESS) NOT type of the pointer.








_________________________________
#3 C Variables ::
Each variable in C has a specific type, which determines
    the size and layout of the variable's memory;
    the range of values that can be stored within that memory; and
    the set of operations that can be applied to the variable.

char    ::  Typically a single octet(one byte). This is an integer type.	
int     ::  The most natural size of integer for the machine.
float   ::  A single-precision floating point value.
double  ::  A double-precision floating point value.
void    ::  Represents the absence of type.


C programming language also allows to define various other types of variables, like : Enumeration, Pointer, Array, Structure, Union

VAriable Declaration & VAriable Definition :
VAriable Declaration tells the compiler How much storage space to occupy, a typical variable Declaration looks as follows:
int c, d;

A variable definition has its meaning at the time of compilation only, the compiler needs actual variable definition at the time of linking the program.

A variable declaration is useful when you are using multiple files and you define your variable in one of the files which will be available at the time of linking of the program.
You will use the keyword [[ extern ]] to declare a variable at any place.
Though you can [ declare ] a variable multiple times in your C program, it can be [ defined ] only once in a file, a function, or a block of code.





________________________________
#4 C Constants and Literals ::

Constants : Refers to the value that doesn't change 
Constants can be of any of the basic data types like:
    an integer constant,
    a floating constant,
    a character constant, or 
    a string literal.
    There are enumeration constants as well.

An integer literal can be a decimal, octal, or hexadecimal constant.
A prefix specifies the base or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal.

An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively.
The suffix can be uppercase or lowercase and can be in any order.

Floating-point Literals ::
While representing decimal form, you must include the decimal point, the exponent, or both; and while representing exponential form, you must include the integer part, the fractional part, or both.
The signed exponent is introduced by e or E.

A character literal can be a
    plain character (e.g., 'x'),
    an escape sequence (e.g., '\t'), or
    a universal character (e.g., '\u02C0').

There are certain characters in C that represent special meaning when preceded by a backslash for example, newline (\n) or tab (\t).

Defining Constants :
There are two simple ways in C to define constants −
    Using #define preprocessor.     ==>     #define identifier value
    Using const keyword.



_________________________________
#5 C - Storage Classes ::

We have four different storage classes in a C program −
    -auto
    -register
    -static
    -extern

------------
auto ::
------------
'auto' can only be used within functions, i.e., local variables.
{   int mount;
    auto int month;
}

--------------
register ::
--------------
The register storage class is used to define local variables that should be stored in a register instead of RAM.
This means that the variable has a maximum size equal to the register size (usually one word) and can't have the unary '&' operator applied to it (as it does not have a memory location).
{
   register int  miles;
}
The register should only be used for variables that require quick access such as counters.

It should also be noted that defining 'register' does not mean that the variable will be stored in a register.
It means that it MIGHT be stored in a register depending on hardware and implementation restrictions.

-----------------------------
The static Storage Class ::
-----------------------------
The static storage class instructs the compiler to keep a local variable in existence during the life-time of the program instead of creating and destroying it each time it comes into and goes out of scope.
Therefore, making local variables static allows them to maintain their values between function calls.

The static modifier may also be applied to global variables.
When this is done, it causes that variable's scope to be restricted to the file in which it is declared.

In C programming, when static is used on a global variable, it causes only one copy of that member to be shared by all the objects of its class.

-------------------------------
The extern Storage Class ::
-------------------------------
The extern storage class is used to give a reference of a global variable that is visible to ALL the program files.
When you use 'extern', the variable cannot be initialized however, it points the variable name at a storage location that has been previously defined.

When you have multiple files and you define a global variable or function, which will also be used in other files, then extern will be used in another file to provide the reference of defined variable or function.
Just for understanding, extern is used to declare a global variable or function in another file.

The extern modifier is most commonly used when there are two or more files sharing the same global variables or functions.









____________________________________________
#6 C - Operators
C language is rich in built-in operators and provides the following types of operators −
    Arithmetic Operators
    Relational Operators
    Logical Operators
    Bitwise Operators
    Assignment Operators
    Misc Operators


Arithmetic Operators :
+   −   *   /   %   ++  --

Relational Operators
==	!=	>	<	>=	<=

Logical Operators
&&	||	! ^
^ -- The operaot is called Exclusive Or


Bitwise Operators :
&	Binary AND Operator copies a bit to the result if it exists in both operands.	(A & B) = 12, i.e., 0000 1100
|	Binary OR Operator copies a bit if it exists in either operand.	(A | B) = 61, i.e., 0011 1101
^	Binary XOR Operator copies the bit if it is set in one operand but not both.	(A ^ B) = 49, i.e., 0011 0001
~	Binary One's Complement Operator is unary and has the effect of 'flipping' bits.	(~A ) = ~(60), i.e,. -0111101
<<	Binary Left Shift Operator.
    The left operands value is moved left by the number of bits specified by the right operand.
    A << 2 = 240 i.e., 1111 0000
>>	Binary Right Shift Operator.
    The left operands value is moved right by the number of bits specified by the right operand.
    A >> 2 = 15 i.e., 0000 1111


Assignment Operator :
=	+=	-=	*=	/=	%=	<<=	>>=	&=	^=	|=	

Misc Operators sizeof & ternary :
sizeof()	Returns the size of a variable.	sizeof(a), where a is integer, will return 4.
&	        Returns the address of a variable.	&a; returns the actual address of the variable.
*	        Pointer to a variable.	*a;
? :	        Conditional Expression.	If Condition is true ? then value X : otherwise value Y


Operators Precedence in C :

Category	        Operator	                        Associativity
Postfix	            () [] -> . ++ - -	                Left to right
Unary	            + - ! ~ ++ - - (type)* & sizeof	    Right to left
Multiplicative	    * / %	                            Left to right
Additive	        + -	                                Left to right
Shift	            << >>	                            Left to right
Relational	        < <= > >=	                        Left to right
Equality	        == !=	                            Left to right
Bitwise             AND	&	                            Left to right
Bitwise             XOR	^	                            Left to right
Bitwise             OR	|	                            Left to right
Logical             AND	&&	                            Left to right
Logical             OR	||	                            Left to right
Conditional	        ?:	                                Right to left
Assignment	        = += -= *= /= %=>>= <<= &= ^= |=	Right to left
Comma	            ,	                                Left to right



___________________________________________________
#7 C - Decision Making ::

C programming language assumes any [non-zero] and [non-null] values as true, and if it is either zero or null, then it is assumed as false value.


if  --   else if  --  else,     &       nested if

if.. else in Short  ::  Exp1 ? Exp2 : Exp3;

switch.. case.. & nested switch ::
switch(expression) {
   case constant-expression  :
      statement(s);
      break; 
   default : 
   statement(s);
}




____________________________________________________
#8 C - Loops ::

For Loop    : for ( init; condition; increment ) {statement(s);}
While Loop  : while(condition) {statement(s);}
do..while Loop  : do {statement(s);} while( condition );
Break statement : break;
Continue Statement  : continue;
goto label


goto label;
..
.
label: statement;   [X Statements]


for ( init; condition; increment ) {
   for ( init; condition; increment ) {statement(s);}
   statement(s);
}
while(condition) {
   while(condition) {statement(s);}
   statement(s);
}
do {
   statement(s);
   do {statement(s);}while( condition );
}while( condition );





__________________________________________________
#9 C - Functions ::

A function in c have the following things : Return Type, Function Name, Function Parameter, Function Body
A sample function looks like        :      int myCustomFunction(int parameter) {}
A sample function declaration looks like    :   int myCustomFunction(int);

Calling Function :
In c there are two ways to call a function
    -- Call By Value
    -- Call By reference

it's important to consider as the the Pointer as storage space for the reference [address]
declaring a pointer :: *ip
assigning the address to the pointer :: ip = &variable

while printing the value of ip the o/p will be address
if you want to print the value stored inside the pointer then use *ip

When you want value from the pointer expression, use "*" [The * is used in two scinario 1st @ for declaring a pointer and second getting the value out of the pointer]

    //Calling a function
        swap(&a, &b);
            ||
            ||
            \/
    void swap(int *x, int *y); //Pointer as the storage space of address

missing the return type while declaring gives the following error ::
11CallByReference.c:6:1: warning: data definition has no type or storage class
 swap(int *First, int *Second);
 ^~~~




_________________________________________
#10 C - Scope Rules ::

In C we have 3 scope rules available    :   Global, Local, Formal

When a [[ local variable ]] is defined, it is [ not initialized ] by the system, you must initialize it yourself.
[[ Global variables ]] are initialized automatically by the system when you define them as follows

Data Type	Initial Default Value
int                 0
char                '\0'
float               0
double              0
pointer             NULL

It's a good programming Practice to initialize the variable @ the time of declaration, to avoid unexpected garbage value.








____________________________________________
#11 C - Arrays ::

















